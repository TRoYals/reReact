(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.index = global.index || {}, global.index.js = {})));
})(this, (function (exports) { 'use strict';

    const currentDisppatcher = {
        current: null
    };
    const resolveDispatcher = () => {
        const dispatcher = currentDisppatcher.current;
        if (dispatcher === null) {
            throw new Error("Hooks can only be called inside the body of a function component.");
        }
        return dispatcher;
    };

    //检查环境是否支持Symbol
    const supportSymbol = typeof Symbol === 'function' && Symbol.for;
    //创建一个Symbol
    const REACT_ELEMENT_TYPE = supportSymbol
        ? Symbol.for('react.element')
        : 0xeac7;

    //ReactElement
    const ReactElement = function (type, key, ref, props) {
        const element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            ref,
            props,
            __mark: 'Naglfar28'
        };
        return element;
    };
    const jsx = (type, config, ...maybeChildren) => {
        let key = null;
        const props = {};
        let ref = null;
        for (const prop in config) {
            const val = config[prop];
            if (prop === 'key') {
                if (hasValidKey(config)) {
                    key = '' + val;
                }
                continue;
            }
            if (prop === 'ref' && val !== undefined) {
                if (hasValidRef(config)) {
                    ref = val;
                }
                continue;
            }
            if ({}.hasOwnProperty.call(config, prop)) {
                props[prop] = val;
            }
        }
        const maybeChildrenLength = maybeChildren.length;
        if (maybeChildrenLength) {
            // 将多余参数作为children
            if (maybeChildrenLength === 1) {
                props.children = maybeChildren[0];
            }
            else {
                props.children = maybeChildren;
            }
        }
        return ReactElement(type, key, ref, props);
    };
    function isValidElement$1(object) {
        return (typeof object === 'object' &&
            object !== null &&
            object.$$typeof === REACT_ELEMENT_TYPE);
    }
    function hasValidKey(config) {
        return config.key !== undefined;
    }
    function hasValidRef(config) {
        return config.ref !== undefined;
    }

    const version = '0.0.0';
    const createElement = jsx;
    const isValidElement = isValidElement$1;
    const useState = (initialState) => {
        const dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
    };
    //internal use only
    const __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_HH = {
        currentDisppatcher
    };

    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_HH = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_HH;
    exports.createElement = createElement;
    exports.isValidElement = isValidElement;
    exports.useState = useState;
    exports.version = version;

}));
